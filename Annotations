echo is a Bash builtin command that writes the arguments it receives to the standard output. It appends a
newline to the output, by default.


About bash variables:
It is important to note that $1 has to be quoted in double quote, not single quote. "$1" expands to the first
command line argument, as desired, while '$1' evaluates to literal string $1.

About Debug:
The -x argument enables you to walk through each line in the script. 
    Example: bash -x ( more on debug-mode.sh Chapter 1).

About Shebang(#!):
    #!/usr/bin/env bash
    the env path is only resolved when its a directly call, for example: my-script.sh
    the shebang is ignored when a specific interpreter is indicated, for example:
    sh my-script.sh
Command tips:
cd - : take you to the previous directory you were in, no matter where it was.   
cd ~ : let you in your home directory.
ls:
    -a, --all               List all entries including ones that start with a dot
    -A, --almost-all List   all entries excluding . and ..
    -c                      Sort files by change time
    -d, --directory         List directory entries
    -h, --human-readable    Show sizes in human readable format (i.e. K, M)
    -H                      Same as above only with powers of 1000 instead of 1024
    -l                      Show contents in long-listing format
    -o                      Long -listing format without group info
    -r, --reverse           Show contents in reverse order
    -s, --size              Print size of each file in blocks
    -S                      Sort by file size
    --sort=WORD             Sort contents by a word. (i.e size, version, status)
    -t                      Sort by modification time
    -u                      Sort by last access time
    -v                      Sort by version
    -1                      List one file per line    

tree: list contents of a specified directory in a tree like format.
    -L specify wich tree level you want the output, for example:
    tree -L 1, would output only the first level of contents in the specified directory.

cat:
    -n Print line numbers
    -v Show non-printing characters using ^ and M- notation except LFD and TAB
    -T Show TAB characters as ^I
    -E Show linefeed(LF) characters as $
    -e Same as -vE
    -b Number nonempty output lines, overrides -n
    -A equivalent to -vET
    -s suppress repeated empty output lines, s refers to squeeze    

cat can be used to concatenate files, for example:
    cat file1 file 2 file 3 > file_1_2_3
it can be used to concatenate files as part of a pipeline, for example:
    cat file1 file2 file3 | grep something inside in one of the files.

Note that gzip part files can be concatenated too, ofr example:
    cat file1.gz file2.gz file3.gz > combined.gz

Writing text to a file using Cat:
    cat > my_file, this will let you writing the text on the terminal and then will wirte to my_file.
    cat >> myfile, same as above except that will append the text to the end of the file.

xxd: when you dont know the precise enconding of a file you can just hexdump the file with xxd, for example:
    printf 'Hëllö wörld' | xxd
output: 00000000: 48c3 ab6c 6cc3 b620 77c3 b672 6c64       H..ll.. w..rld



